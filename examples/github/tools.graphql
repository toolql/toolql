# Find the ID of a Github repository
query getRepositoryId(
  # Repository name
  $name: String!,
  # Owner of the repository
  $owner: String!
) {
  repository(name: $name, owner: $owner) {
    # Repository ID
    id
  }
}

# Add a star to a repository given its ID
mutation starRepo (
  # The Repository ID
  $id: ID!
) {
  addStar(input: {
    starrableId: $id
  }) {
    starrable {
      # Updated number of stars for the repository
      stargazerCount
    }
  }
}

# Find repositories that match a given search term
query repoSearch(
  # The term to search for
  $query: String!,
  # The maximum number of results - defaults to 50
  $maxResults: Int = 50
) {
  search(
    query: $query,
    type: REPOSITORY,
    first: $maxResults
  ) {
    nodes {
      ... on Repository {
        # Name of the repository
        name
        owner {
          # ID of the repository owner
          id
        }
        # ID of the repository
        id
      }
    }
  }
}

# Get information about the user's commit activity for the previous week.
# The resulting commit count report is broken down by date and named repository.
query weeklyCommits(
  # Provide a date seven days before today
  $from: DateTime
) {
  viewer {
    contributionsCollection(from: $from) {
      commitContributionsByRepository {
        contributions(first: 50) {
          nodes {
            # The date of a set of commits
            occurredAt
            repository {
              # The repository name
              name
            }
            # The number of commits on this repository for this day
            commitCount
          }
        }
      }
    }
  }
}

# Find information about a user's repository access. Results will include the user's own repositories and any others they have access to broken down by organization.
query myRepos {
  viewer {
    repositories(first: 50) {
      nodes {
        name
      }
    }
    organizations(first: 50) {
      nodes {
        name
        repositories(first: 50) {
          nodes {
            name
          }
        }
      }
    }
  }
}
